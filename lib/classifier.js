// Generated by CoffeeScript 1.10.0
(function() {
  var Classification, Classifier, Controller, IS_DEV, Subject, User, flags, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  flags = require('./lib/flags');

  Controller = ((ref = window.zooniverse) != null ? (ref1 = ref.controllers) != null ? ref1.BaseController : void 0 : void 0) || require('zooniverse/controllers/base-controller');

  User = ((ref2 = window.zooniverse) != null ? (ref3 = ref2.models) != null ? ref3.User : void 0 : void 0) || require('zooniverse/models/user');

  Subject = ((ref4 = window.zooniverse) != null ? (ref5 = ref4.models) != null ? ref5.Subject : void 0 : void 0) || require('zooniverse/models/subject');

  Classification = ((ref6 = window.zooniverse) != null ? (ref7 = ref6.models) != null ? ref7.Classification : void 0 : void 0) || require('zooniverse/models/classification');

  IS_DEV = flags.dev != null ? flags.dev === 1 : +location.port > 1023;

  Classifier = (function(superClass) {
    extend(Classifier, superClass);

    Classifier.prototype.CREATE = "zooniverse-readymade:classifier:create";

    Classifier.prototype.LOAD_SUBJECT = "zooniverse-readymade:classifier:load_subject";

    Classifier.prototype.LOAD_CLASSIFICATION = "zooniverse-readymade:classifier:load_classification";

    Classifier.prototype.CREATE_CLASSIFICATION = "zooniverse-readymade:classifier:create_classification";

    Classifier.prototype.FINISH_SUBJECT = "zooniverse-readymade:classifier:finish_subject";

    Classifier.prototype.SEND_CLASSIFICATION = "zooniverse-readymade:classifier:send_classification";

    Classifier.prototype.Subject = null;

    Classifier.prototype.subjectGroup = Subject.prototype.subjectGroup;

    Classifier.prototype.className = 'readymade-classifier';

    function Classifier() {
      this.Subject = (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          return _Class.__super__.constructor.apply(this, arguments);
        }

        return _Class;

      })(Subject);
      Classifier.__super__.constructor.apply(this, arguments);
      this.Subject.group = this.subjectGroup;
      this.listenTo(User, 'change', (function(_this) {
        return function(e, user) {
          return _this.onUserChange(user);
        };
      })(this));
      this.listenTo(this.Subject, 'getting-next', (function(_this) {
        return function() {
          return _this.onSubjectGettingNext();
        };
      })(this));
      this.listenTo(this.Subject, 'select', (function(_this) {
        return function(e, subject) {
          return _this.onSubjectSelect(subject);
        };
      })(this));
      this.listenTo(this.Subject, 'no-more', (function(_this) {
        return function(e) {
          return _this.onNoMoreSubjects();
        };
      })(this));
      if (IS_DEV) {
        window.classifier = this;
      }
      this.trigger(this.CREATE, this);
    }

    Classifier.prototype.listenTo = function(thing, eventName, handler) {
      var addEvent, removeEvent;
      addEvent = 'on' in thing ? 'on' : 'addEventListener';
      removeEvent = 'off' in thing ? 'off' : 'removeEventListener';
      thing[addEvent](eventName, handler);
      return this.on('destroy', function() {
        return thing[removeEvent](eventName, handler);
      });
    };

    Classifier.prototype.onUserChange = function(user) {
      if (this.classification == null) {
        return this.getNextSubject();
      }
    };

    Classifier.prototype.onSubjectGettingNext = function() {
      this.el.addClass('readymade-loading');
      return this.classification = null;
    };

    Classifier.prototype.onNoMoreSubjects = function() {};

    Classifier.prototype.onSubjectSelect = function(subject) {
      this.createClassification(subject);
      return this.loadSubject(subject, (function(_this) {
        return function(subject) {
          return _this.loadClassification(_this.classification, function(classification) {
            return _this.el.removeClass('readymade-loading');
          });
        };
      })(this));
    };

    Classifier.prototype.createClassification = function(subject) {
      this.classification = new Classification({
        subject: subject
      });
      return this.trigger(this.CREATE_CLASSIFICATION, this, this.classification);
    };

    Classifier.prototype.loadSubject = function(subject, callback) {
      if (typeof callback === "function") {
        callback(subject);
      }
      return this.trigger(this.LOAD_SUBJECT, [subject]);
    };

    Classifier.prototype.loadClassification = function(classification, callback) {
      if (typeof callback === "function") {
        callback(classification);
      }
      return this.trigger(this.LOAD_CLASSIFICATION, this, classification);
    };

    Classifier.prototype.finishSubject = function() {
      this.sendClassification();
      this.showSummary();
      return this.trigger(this.FINISH_SUBJECT, this, this.classification);
    };

    Classifier.prototype.sendClassification = function() {
      if (!IS_DEV) {
        this.classification.send();
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log(JSON.stringify(this.classification) + (IS_DEV ? '(Not sent)' : ''));
      }
      return this.trigger(this.SEND_CLASSIFICATION, this, this.classification);
    };

    Classifier.prototype.showSummary = function() {
      return this.getNextSubject();
    };

    Classifier.prototype.getNextSubject = function() {
      return this.Subject.next();
    };

    return Classifier;

  })(Controller);

  module.exports = Classifier;

}).call(this);
