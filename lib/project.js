// Generated by CoffeeScript 1.9.1
(function() {
  var Api, ClassifyPage, Profile, Project, SiteBackground, SiteHeader, StackOfPages, TabSet, TopBar, User, ZooniverseFooter, dash, homePageTemplate, teamPageTemplate, translate,
    slice = [].slice;

  Api = require('zooniverse/lib/api');

  TopBar = require('zooniverse/controllers/top-bar');

  SiteBackground = require('./site-background');

  SiteHeader = require('./site-header');

  StackOfPages = require('stack-of-pages');

  translate = require('zooniverse/lib/translate');

  homePageTemplate = require('./templates/home-page');

  ZooniverseFooter = require('zooniverse/controllers/footer');

  dash = require('./lib/dash');

  ClassifyPage = require('./classify-page');

  Profile = require('zooniverse/controllers/profile');

  teamPageTemplate = require('./templates/team-page');

  User = require('zooniverse/models/user');

  TabSet = require('./tab-control');

  Project = (function() {
    Project.prototype.parent = document.body;

    Project.prototype.background = '';

    Project.prototype.id = '';

    Project.prototype.producer = '';

    Project.prototype.title = '';

    Project.prototype.summary = '';

    Project.prototype.description = '';

    Project.prototype.about = '';

    Project.prototype.pages = null;

    Project.prototype.workflows = null;

    Project.prototype.tasks = null;

    Project.prototype.firstTask = '';

    Project.prototype.subjectGroup = false;

    Project.prototype.organizations = null;

    Project.prototype.scientists = null;

    Project.prototype.developers = null;

    function Project(configuration) {
      var content, examples, firstTask, footer, hash, href, j, k, key, label, len, len1, newContent, page, property, ref, ref1, ref2, ref3, subjectGroup, tasks, title, tutorialSteps, value;
      if (configuration == null) {
        configuration = {};
      }
      for (property in configuration) {
        value = configuration[property];
        this[property] = value;
      }
      if (this.background) {
        this.siteBackground = new SiteBackground({
          src: this.background,
          el: '#site-background'
        });
      }
      if (this.id) {
        this.connect(this.id);
      }
      this.header = new SiteHeader({
        el: '#main-header',
        template: SiteHeader.prototype.template(this)
      });
      this.stack = new StackOfPages({
        el: document.getElementById('main-content'),
        changeDisplay: false
      });
      this.stack.el.className += ' readymade-main-stack';
      if (this.summary || this.description) {
        this.homePage = this.addPage('#/', translate('readymade.home'), homePageTemplate(this));
        if (this.footer !== false) {
          footer = new ZooniverseFooter;
          footer.el.appendTo('#main-footer');
        }
      }
      this.classifyPages = [];
      if (this.workflows != null) {
        ref = this.workflows;
        for (j = 0, len = ref.length; j < len; j++) {
          ref1 = ref[j], key = ref1.key, label = ref1.label, subjectGroup = ref1.subjectGroup, tasks = ref1.tasks, firstTask = ref1.firstTask, tutorialSteps = ref1.tutorialSteps, examples = ref1.examples;
          if (label == null) {
            label = translate('readymade.classify');
          }
          if (key == null) {
            key = dash(label).replace(/\-/g, '_');
          }
          page = new ClassifyPage({
            subjectGroup: subjectGroup != null ? subjectGroup : this.subjectGroup,
            workflow: key,
            tasks: tasks,
            firstTask: firstTask,
            tutorialSteps: tutorialSteps,
            examples: examples
          });
          this.addPage("#/" + (dash(label)) + "/:subjectID", label, page);
          this.classifyPages.push(page);
        }
      } else if (this.tasks != null) {
        page = new ClassifyPage({
          tasks: this.tasks,
          firstTask: this.firstTask,
          subjectGroup: this.subjectGroup,
          tutorialSteps: this.tutorialSteps,
          examples: this.examples
        });
        this.addPage('#/classify/:subjectID', translate('readymade.classify'), page);
        this.classifyPages.push(page);
      }
      if (this.profile !== false) {
        this.profile = new Profile;
        this.addPage('#/profile', translate('readymade.profile'), this.profile);
      }
      if (this.pages != null) {
        ref2 = this.pages;
        for (k = 0, len1 = ref2.length; k < len1; k++) {
          page = ref2[k];
          for (title in page) {
            content = page[title];
            if (content instanceof Array) {
              newContent = this.makeStackFromPages(content, [dash(title)]);
            } else if (typeof content === 'string') {
              newContent = "<div class='readymade-generic-page' data-readymade-page='" + (dash(title)) + "'>" + content + "</div>";
            } else {
              newContent = content;
            }
            hash = "#/" + (dash(title));
            this.addPage(hash, title, newContent);
          }
        }
      }
      if (this.organizations || this.scientists || this.developers) {
        this.addPage('#/team', translate('readymade.team'), teamPageTemplate(this));
      }
      this.buildNavTabs(this.header.linksList, 'nav');
      if (this.externalLinks != null) {
        ref3 = this.externalLinks;
        for (title in ref3) {
          href = ref3[title];
          this.header.addNavLink(href, title);
        }
      }
      setTimeout((function(_this) {
        return function() {
          return _this.stack.onHashChange();
        };
      })(this));
      User.fetch();
    }

    Project.prototype.makeStackFromPages = function(pages, currentPath) {
      var container, content, description, hash, i, id, j, len, mapOfHashes, nav, prefix, stack, title;
      if (currentPath == null) {
        currentPath = [];
      }
      mapOfHashes = {
        changeDisplay: false
      };
      prefix = currentPath[currentPath.length - 1];
      nav = document.createElement('nav');
      nav.className = 'readymade-subnav';
      for (i = j = 0, len = pages.length; j < len; i = ++j) {
        description = pages[i];
        for (title in description) {
          content = description[title];
          id = dash(title);
          currentPath.push(id);
          hash = ['#'].concat(slice.call(currentPath)).join('/');
          if (mapOfHashes["default"] == null) {
            mapOfHashes["default"] = hash;
          }
          nav.appendChild(this.navLink(id, hash, title));
          mapOfHashes[hash] = content instanceof Array ? this.makeStackFromPages(content, currentPath) : typeof content === 'string' ? "<div id='" + id + "' class='readymade-generic-page' data-readymade-page='" + (dash(title)) + "'>" + content + "</div>" : (container = document.createElement('div'), content);
          currentPath.pop();
        }
      }
      stack = new StackOfPages(mapOfHashes);
      stack.el.insertBefore(nav, stack.el.firstChild);
      setTimeout(function() {
        return stack.onHashChange();
      });
      this.buildNavTabs(nav, prefix, stack);
      return stack;
    };

    Project.prototype.connect = function(project) {
      this.api = new Api({
        project: project
      });
      return this.topBar = new TopBar({
        el: '#top-bar'
      });
    };

    Project.prototype.addPage = function(href, label, content) {
      var frag_id, link, linkHREF, page;
      linkHREF = href.replace(/\/:[^\/]+/g, '');
      frag_id = linkHREF.split('/').pop();
      if (frag_id === '') {
        frag_id = 'home';
      }
      if (content instanceof StackOfPages) {
        href += "/*";
      }
      this.stack.add(href, content);
      page = this.stack.el.children[this.stack.el.children.length - 1];
      page.id = frag_id;
      link = this.header.addNavLink('#' + frag_id, label);
      link.addEventListener('click', function(e) {
        window.location.hash = linkHREF;
        return e.preventDefault();
      });
      return page;
    };

    Project.prototype.navLink = function(id, hash, title) {
      var link;
      link = document.createElement('a');
      link.href = '#' + id;
      link.innerHTML = title;
      link.addEventListener('click', (function(_this) {
        return function(e) {
          e.preventDefault();
          return window.location.hash = hash;
        };
      })(this));
      return link;
    };

    Project.prototype.buildNavTabs = function(nav, prefix, stack) {
      var hash, j, len, link, nav_links, panel, panels, ref;
      if (stack == null) {
        stack = this.stack;
      }
      nav_links = [];
      panels = [];
      if (nav[0] != null) {
        nav = nav[0];
      }
      ref = nav.querySelectorAll('a');
      for (j = 0, len = ref.length; j < len; j++) {
        link = ref[j];
        hash = link.getAttribute('href');
        panel = stack.el.querySelector(hash);
        if (panel != null) {
          panels.push(panel);
          nav_links.push(link);
        }
      }
      return this.buildTabset(nav_links, panels, prefix, stack);
    };

    Project.prototype.buildTabset = function(tabs, panels, prefix, stack) {
      var i, j, len, panel, results, tab, tabset;
      tabset = new TabSet;
      results = [];
      for (i = j = 0, len = tabs.length; j < len; i = ++j) {
        tab = tabs[i];
        panel = panels[i];
        if (tab.id === '') {
          tab.id = prefix + '-tab-' + i;
        }
        if (panel.id === '') {
          panel.id = prefix + '-' + i;
        }
        tabset.add(tab, panel, panel.hasAttribute(stack.activatedAttr));
        results.push((function(panel) {
          return panel.addEventListener(stack.activateEvent, function(e) {
            e.stopPropagation();
            return tabset.activate(panel);
          });
        })(panel));
      }
      return results;
    };

    return Project;

  })();

  module.exports = Project;

}).call(this);
