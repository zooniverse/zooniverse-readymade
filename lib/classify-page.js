// Generated by CoffeeScript 1.10.0
(function() {
  var $, Api, ClassificationSummary, Classifier, ClassifyPage, DecisionTree, Dialog, DrawingTask, FieldGuide, MiniTutorial, StackOfPages, SubjectViewer, User, currentConfig, loginDialog, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, signupDialog, translate,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Dialog = ((ref = window.zooniverse) != null ? (ref1 = ref.controllers) != null ? ref1.Dialog : void 0 : void 0) || require('zooniverse/controllers/dialog');

  loginDialog = ((ref2 = window.zooniverse) != null ? (ref3 = ref2.controllers) != null ? ref3.loginDialog : void 0 : void 0) || require('zooniverse/controllers/login-dialog');

  signupDialog = ((ref4 = window.zooniverse) != null ? (ref5 = ref4.controllers) != null ? ref5.signupDialog : void 0 : void 0) || require('zooniverse/controllers/signup-dialog');

  Classifier = require('./classifier');

  MiniTutorial = require('./mini-tutorial');

  SubjectViewer = require('./subject-viewer');

  DecisionTree = require('zooniverse-decision-tree');

  ClassificationSummary = require('./classification-summary');

  DrawingTask = require('./tasks/drawing');

  FieldGuide = require('./field-guide');

  currentConfig = require('zooniverse-readymade/current-configuration');

  User = ((ref6 = window.zooniverse) != null ? (ref7 = ref6.models) != null ? ref7.User : void 0 : void 0) || require('zooniverse/models/user');

  $ = window.jQuery;

  StackOfPages = require('stack-of-pages');

  Api = ((ref8 = window.zooniverse) != null ? ref8.Api : void 0) || require('zooniverse/lib/api');

  translate = ((ref9 = window.zooniverse) != null ? ref9.translate : void 0) || require('zooniverse/lib/translate');

  ClassifyPage = (function(superClass) {
    extend(ClassifyPage, superClass);

    ClassifyPage.prototype.START_TUTORIAL = "zooniverse-readymade:classifier:start_tutorial";

    ClassifyPage.prototype.targetSubjectID = '';

    ClassifyPage.prototype.workflow = 'untitled_workflow';

    ClassifyPage.prototype.tasks = null;

    ClassifyPage.prototype.firstTask = '';

    ClassifyPage.prototype.tutorial = null;

    ClassifyPage.prototype.tutorialSteps = null;

    ClassifyPage.prototype.examples = null;

    ClassifyPage.prototype.classificationsSubmitted = 0;

    ClassifyPage.prototype.loginPromptEvery = 5;

    ClassifyPage.prototype.className = Classifier.prototype.className + " readymade-classify-page";

    ClassifyPage.prototype.template = require('./templates/classify-page');

    ClassifyPage.prototype.elements = {
      '.readymade-no-more-subjects-message': 'noMoreSubjectsMessage',
      '.readymade-subject-viewer-container': 'subjectViewerContainer',
      '.readymade-decision-tree-container': 'decisionTreeContainer',
      '.readymade-summary-container': 'summaryContainer',
      '.readymade-field-guide-container': 'fieldGuideContainer'
    };

    function ClassifyPage() {
      ClassifyPage.__super__.constructor.apply(this, arguments);
      if (this.tutorialSteps != null) {
        this.tutorial = new MiniTutorial({
          steps: this.tutorialSteps
        });
        $(this.tutorial.el).on(this.tutorial.CLOSE_EVENT, function() {
          var ref10;
          return (ref10 = User.current) != null ? ref10.setPreference('tutorial_done', true) : void 0;
        });
        this.el.append(this.tutorial.el);
      }
      this.subjectViewer = new SubjectViewer;
      this.subjectViewerContainer.append(this.subjectViewer.el);
      this.decisionTree = new DecisionTree({
        taskTypes: {
          radio: require('./tasks/radio'),
          checkbox: require('./tasks/checkbox'),
          button: require('./tasks/button'),
          filter: require('./tasks/filter'),
          drawing: DrawingTask
        },
        tasks: this.tasks,
        firstTask: this.firstTask || Object.keys(this.tasks)[0],
        autofocus: false,
        backLabel: translate('readymade.back')
      });
      this.listenTo(this.decisionTree.el, this.decisionTree.LOAD_TASK, (function(_this) {
        return function(e) {
          _this.subjectViewer.setTool(null, null);
          _this.subjectViewer.setTaskIndex(e.detail.index);
          if (e.detail.task.type === 'drawing') {
            _this.updateDrawingTask();
          }
          if (!_this.decisionTree.autofocus) {
            _this.decisionTree.autofocus = true;
            return;
          }
          if (e.detail.index > 0) {
            return _this.decisionTree.backButton.focus();
          } else {
            return _this.decisionTree.el.querySelector('input').focus();
          }
        };
      })(this));
      this.listenTo(this.decisionTree.el, DrawingTask.prototype.SELECT_TOOL, (function(_this) {
        return function(e) {
          return setTimeout(function() {
            var choice, ref10, tool;
            ref10 = e.detail, tool = ref10.tool, choice = ref10.choice;
            return _this.subjectViewer.setTool(tool, choice);
          });
        };
      })(this));
      this.listenTo(this.decisionTree.el, this.decisionTree.COMPLETE, (function(_this) {
        return function() {
          _this.finishSubject();
          return _this.summary.el.find('button[name=readymade-dont-talk]').focus();
        };
      })(this));
      this.decisionTreeContainer.append(this.decisionTree.el);
      this.listenTo(this.subjectViewer.markingSurface, 'marking-surface:add-tool', (function(_this) {
        return function() {
          return _this.updateDrawingTask();
        };
      })(this));
      this.listenTo(this.subjectViewer.markingSurface, 'marking-surface:remove-tool', (function(_this) {
        return function() {
          return _this.updateDrawingTask();
        };
      })(this));
      this.summary = new ClassificationSummary;
      this.summary.on(this.summary.DISMISS, (function(_this) {
        return function() {
          return _this.getNextSubject();
        };
      })(this));
      this.summaryContainer.append(this.summary.el);
      if (this.examples != null) {
        this.fieldGuide = new FieldGuide({
          examples: this.examples
        });
        this.fieldGuideContainer.append(this.fieldGuide.el);
      }
      this.el.on(StackOfPages.prototype.activateEvent, (function(_this) {
        return function() {
          return _this.onActivate.apply(_this, arguments);
        };
      })(this));
    }

    ClassifyPage.prototype.isUserScientist = function() {
      var project, result, talkUser;
      result = new $.Deferred;
      if (User.current != null) {
        project = Api.current.get("/projects/" + Api.current.project);
        talkUser = Api.current.get("/projects/" + Api.current.project + "/talk/users/" + User.current.name);
        $.when(project, talkUser).then((function(_this) {
          return function(project, talkUser) {
            var details, projectRoles, ref10, ref11, ref12, ref13, ref14;
            projectRoles = (ref10 = (ref11 = talkUser.talk) != null ? (ref12 = ref11.roles) != null ? ref12[project.id] : void 0 : void 0) != null ? ref10 : [];
            details = {
              project: project.id,
              roles: projectRoles,
              scientist: indexOf.call(projectRoles, 'scientist') >= 0,
              admin: indexOf.call(projectRoles, 'admin') >= 0,
              'brian-c': (ref13 = talkUser.name) === 'brian-c' || ref13 === 'eatyourgreens'
            };
            if (typeof console !== "undefined" && console !== null) {
              console.log('Can you pick your own subject?', JSON.stringify(details, null, 2));
            }
            return result.resolve(indexOf.call(projectRoles, 'scientist') >= 0 || indexOf.call(projectRoles, 'admin') >= 0 || ((ref14 = talkUser.name) === 'brian-c' || ref14 === 'eatyourgreens'));
          };
        })(this));
      } else {
        result.resolve(false);
      }
      return result.promise();
    };

    ClassifyPage.prototype.onActivate = function(e) {
      var ref10;
      this.targetSubjectID = e.originalEvent.detail.subjectID;
      if (this.targetSubjectID) {
        if (this.targetSubjectID !== ((ref10 = this.Subject.current) != null ? ref10.zooniverse_id : void 0)) {
          this.getNextSubject();
        }
      }
      if (this.tutorial.el.getAttribute('aria-hidden') === 'false') {
        return setTimeout((function(_this) {
          return function() {
            var ref11;
            return (ref11 = _this.tutorial.active_button) != null ? ref11.focus() : void 0;
          };
        })(this));
      }
    };

    ClassifyPage.prototype.onUserChange = function(user) {
      var ref10, ref11, ref12, tutorialDone;
      ClassifyPage.__super__.onUserChange.apply(this, arguments);
      this.classificationsSubmitted = 0;
      if (this.tutorial != null) {
        tutorialDone = user != null ? (ref10 = user.project) != null ? ref10.tutorial_done : void 0 : void 0;
        if (tutorialDone == null) {
          tutorialDone = user != null ? (ref11 = user.preferences) != null ? (ref12 = ref11[currentConfig.id]) != null ? ref12.tutorial_done : void 0 : void 0 : void 0;
        }
        if (tutorialDone) {
          if (this.tutorial.el.hasAttribute('data-open')) {
            return this.tutorial.close();
          }
        } else {
          return this.startTutorial();
        }
      }
    };

    ClassifyPage.prototype.getNextSubject = function() {
      if (this.targetSubjectID) {
        return this.isUserScientist().then((function(_this) {
          return function(theyAre) {
            var request;
            if (theyAre) {
              request = Api.current.get("/projects/" + Api.current.project + "/subjects/" + _this.targetSubjectID);
              request.then(function(data) {
                var subject;
                subject = new _this.Subject(data);
                return subject.select();
              });
              return request.fail(function() {
                return alert("There's no subject with the ID " + _this.targetSubjectID + ".");
              });
            } else {
              alert('Sorry, only science team members can choose the subjects they classify.');
              return ClassifyPage.__super__.getNextSubject.apply(_this, arguments);
            }
          };
        })(this));
      } else {
        return ClassifyPage.__super__.getNextSubject.apply(this, arguments);
      }
    };

    ClassifyPage.prototype.startTutorial = function() {
      this.tutorial.goTo(0);
      this.tutorial.open();
      return this.trigger(this.START_TUTORIAL, this, this.tutorial);
    };

    ClassifyPage.prototype.onNoMoreSubjects = function() {
      this.noMoreSubjectsMessage.show();
      this.subjectViewerContainer.hide();
      this.decisionTreeContainer.hide();
      return this.summaryContainer.hide();
    };

    ClassifyPage.prototype.createClassification = function(subject) {
      ClassifyPage.__super__.createClassification.apply(this, arguments);
      if (subject.zooniverse_id === this.targetSubjectID) {
        return this.classification.set('chosen_subject', true);
      }
    };

    ClassifyPage.prototype.loadSubject = function(subject, callback) {
      var args;
      args = arguments;
      this.noMoreSubjectsMessage.hide();
      this.subjectViewerContainer.show();
      this.decisionTreeContainer.show();
      this.summaryContainer.hide();
      this.subjectViewer.loadSubject(subject, (function(_this) {
        return function() {
          return ClassifyPage.__super__.loadSubject.apply(_this, args);
        };
      })(this));
      return this.summary.loadSubject(subject);
    };

    ClassifyPage.prototype.loadClassification = function(classification, callback) {
      var args;
      args = arguments;
      this.decisionTree.reset();
      return this.subjectViewer.loadClassification(classification, (function(_this) {
        return function() {
          return ClassifyPage.__super__.loadClassification.apply(_this, args);
        };
      })(this));
    };

    ClassifyPage.prototype.showSummary = function() {
      this.decisionTreeContainer.hide();
      this.summaryContainer.show();
      return this.targetSubjectID = '';
    };

    ClassifyPage.prototype.sendClassification = function() {
      var annotation, i, len, ref10;
      this.classification.set('workflow', this.workflow);
      ref10 = this.composeAnnotations();
      for (i = 0, len = ref10.length; i < len; i++) {
        annotation = ref10[i];
        this.classification.annotate(annotation);
      }
      ClassifyPage.__super__.sendClassification.apply(this, arguments);
      this.classificationsSubmitted += 1;
      if (User.current == null) {
        if (this.classificationsSubmitted % this.loginPromptEvery === 0) {
          return this.promptToLogIn();
        }
      }
    };

    ClassifyPage.prototype.composeAnnotations = function() {
      var annotations, decisionTreeValues, i, key, keyAndValue, len, value;
      annotations = [];
      decisionTreeValues = this.decisionTree.getValues();
      for (i = 0, len = decisionTreeValues.length; i < len; i++) {
        keyAndValue = decisionTreeValues[i];
        for (key in keyAndValue) {
          value = keyAndValue[key];
          annotations.push({
            key: key,
            value: value
          });
        }
      }
      return annotations;
    };

    ClassifyPage.prototype.promptToLogIn = function() {
      var prompt;
      prompt = new Dialog({
        warning: true,
        content: "<header>You've submitted " + this.classificationsSubmitted + " classifications, but you're you're not logged in!</header>\n<p>Please sign in so we can make better use of your work and give you credit when the data is published.</p>\n<p class=\"action\">\n  <button name=\"close-dialog\">No thanks</button>\n  <button name=\"register\">Register</button>\n  <button name=\"sign-in\">Sign in</button>\n</p>",
        events: $.extend({}, Dialog.prototype.events, {
          'click button[name="register"]': function() {
            this.hide();
            return signupDialog.show();
          },
          'click button[name="sign-in"]': function() {
            this.hide();
            return loginDialog.show();
          }
        }),
        hide: function() {
          Dialog.prototype.hide.call(this);
          return setTimeout(((function(_this) {
            return function() {
              return _this.destroy();
            };
          })(this)), 600);
        }
      });
      prompt.show();
      return setTimeout(function() {
        return prompt.el[0].querySelector('button[name=sign-in]').focus();
      });
    };

    ClassifyPage.prototype.updateDrawingTask = function() {
      var i, len, mark, marks, ref10, ref11;
      marks = [];
      ref10 = this.subjectViewer.markingSurface.tools;
      for (i = 0, len = ref10.length; i < len; i++) {
        mark = ref10[i].mark;
        if (mark._taskIndex === this.subjectViewer.taskIndex) {
          marks.push(mark);
        }
      }
      return (ref11 = this.decisionTree.currentTask) != null ? ref11.reset(marks) : void 0;
    };

    ClassifyPage.prototype.events = {
      'change input[name="favorite"]': function(e) {
        return this.classification.favorite = e.target.checked;
      },
      'click button[name="restart-tutorial"]': function() {
        return this.startTutorial();
      }
    };

    return ClassifyPage;

  })(Classifier);

  module.exports = ClassifyPage;

}).call(this);
