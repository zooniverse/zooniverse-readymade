// Generated by CoffeeScript 1.9.1
(function() {
  var LEFT_CURSOR, RIGHT_CURSOR, SPACE, TabControl, TabSet,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  LEFT_CURSOR = 37;

  RIGHT_CURSOR = 39;

  SPACE = 32;

  TabControl = (function() {
    function TabControl(tab1, panel1, active) {
      this.tab = tab1;
      this.panel = panel1;
      if (active == null) {
        active = false;
      }
      this.destroy = bind(this.destroy, this);
      this.deactivate = bind(this.deactivate, this);
      this.activate = bind(this.activate, this);
      this.tab.setAttribute('role', 'tab');
      this.tab.setAttribute('aria-controls', this.panel.id);
      this.panel.setAttribute('role', 'tabPanel');
      this.panel.setAttribute('aria-labelledby', this.tab.id);
      this.tab.setAttribute('aria-selected', active);
      this.panel.setAttribute('aria-selected', active);
      this.panel.setAttribute('aria-hidden', !active);
    }

    TabControl.prototype.activate = function() {
      this.panel.setAttribute('aria-selected', 'true');
      this.panel.setAttribute('aria-hidden', 'false');
      return this.tab.setAttribute('aria-selected', 'true');
    };

    TabControl.prototype.deactivate = function() {
      this.panel.setAttribute('aria-selected', 'false');
      this.panel.setAttribute('aria-hidden', 'true');
      return this.tab.setAttribute('aria-selected', 'false');
    };

    TabControl.prototype.destroy = function() {
      this.tab.removeAttribute('role');
      this.tab.removeAttribute('aria-controls');
      this.panel.removeAttribute('role');
      this.panel.removeAttribute('aria-labelledby');
      this.tab.removeAttribute('aria-selected');
      this.panel.removeAttribute('aria-selected');
      return this.panel.removeAttribute('aria-hidden');
    };

    return TabControl;

  })();

  TabSet = (function() {
    TabSet.prototype.tabcontrols = [];

    TabSet.prototype.active_index = 0;

    TabSet.prototype.focus_index = 0;

    function TabSet(tabcontrols) {
      this.tabcontrols = tabcontrols != null ? tabcontrols : [];
      this.destroy = bind(this.destroy, this);
      this.goTo = bind(this.goTo, this);
      this.activate = bind(this.activate, this);
      this.moveFocus = bind(this.moveFocus, this);
      this.handleFocus = bind(this.handleFocus, this);
      this.handleKeydown = bind(this.handleKeydown, this);
      this.handleClick = bind(this.handleClick, this);
      this.add = bind(this.add, this);
    }

    TabSet.prototype.add = function(tab, panel, active) {
      var tab_control;
      if (active == null) {
        active = false;
      }
      if (tab[0] != null) {
        tab = tab[0];
      }
      if (panel[0] != null) {
        panel = panel[0];
      }
      tab_control = new TabControl(tab, panel, active);
      this.tabcontrols.push(tab_control);
      tab.addEventListener('click', this.handleClick);
      tab.addEventListener('keydown', this.handleKeydown);
      tab.addEventListener('focus', this.handleFocus);
      return tab_control;
    };

    TabSet.prototype.handleClick = function(e) {
      return this.activate(e.currentTarget);
    };

    TabSet.prototype.handleKeydown = function(e) {
      var new_index;
      if (e.which === LEFT_CURSOR) {
        new_index = Math.max(0, this.focus_index - 1);
      }
      if (e.which === RIGHT_CURSOR) {
        new_index = Math.min(this.tabcontrols.length - 1, this.focus_index + 1);
      }
      if (e.which === SPACE) {
        e.currentTarget.click();
      }
      if (new_index != null) {
        return this.moveFocus(new_index);
      }
    };

    TabSet.prototype.handleFocus = function(e) {
      var i, j, len, ref, results, tabcontrol;
      ref = this.tabcontrols;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        tabcontrol = ref[i];
        if (tabcontrol.tab === e.currentTarget) {
          results.push(this.focus_index = i);
        }
      }
      return results;
    };

    TabSet.prototype.moveFocus = function(new_index) {
      this.tabcontrols[new_index].tab.focus();
      return this.focus_index = new_index;
    };

    TabSet.prototype.activate = function(el) {
      var i, j, len, ref, results, tab_control;
      if (el[0] != null) {
        el = el[0];
      }
      if (el.getAttribute('aria-selected') === 'true') {
        return;
      }
      ref = this.tabcontrols;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        tab_control = ref[i];
        if (tab_control.tab.id === el.id || tab_control.panel.id === el.id) {
          tab_control.activate();
          results.push(this.active_index = i);
        } else {
          results.push(tab_control.deactivate());
        }
      }
      return results;
    };

    TabSet.prototype.goTo = function(index) {
      index = modulo(index, this.tabcontrols.length);
      if (this.tabcontrols[index]) {
        return this.activate(this.tabcontrols[index].tab);
      }
    };

    TabSet.prototype.destroy = function() {
      var j, len, ref, results, tabcontrol;
      ref = this.tabcontrols;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        tabcontrol = ref[j];
        tabcontrol.tab.removeEventListener('click', this.handleClick);
        results.push(tabcontrol.destroy());
      }
      return results;
    };

    return TabSet;

  })();

  module.exports = TabSet;

}).call(this);
