// Generated by CoffeeScript 1.10.0
(function() {
  var Controller, MarkingSurface, SubjectViewer, loadImage, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  Controller = ((ref = window.zooniverse) != null ? (ref1 = ref.controllers) != null ? ref1.BaseController : void 0 : void 0) || require('zooniverse/controllers/base-controller');

  MarkingSurface = require('marking-surface');

  loadImage = require('./lib/load-image');

  SubjectViewer = (function(superClass) {
    extend(SubjectViewer, superClass);

    SubjectViewer.prototype.className = 'readymade-subject-viewer';

    SubjectViewer.prototype.template = require('./templates/subject-viewer');

    SubjectViewer.prototype.currentFrame = 0;

    SubjectViewer.prototype.advanceTimeout = NaN;

    SubjectViewer.prototype.maxWidth = 0;

    SubjectViewer.prototype.maxHeight = 0;

    SubjectViewer.prototype.taskIndex = -1;

    SubjectViewer.prototype.toolOptions = null;

    SubjectViewer.prototype.FROM_CURRENT_TASK = 'data-from-current-task';

    SubjectViewer.prototype.elements = {
      'input[name="favorite"]': 'favoriteToggle',
      'input[name="hide-old-marks"]': 'oldMarksToggle',
      '.readymade-marking-surface-container': 'markingSurfaceContainer',
      '.readymade-frame-controls': 'frameControls',
      'button[name="play-frames"]': 'playButton',
      'button[name="pause-frames"]': 'pauseButton',
      '.readymade-frame-toggles-list': 'togglesList'
    };

    function SubjectViewer() {
      this.rescale = bind(this.rescale, this);
      SubjectViewer.__super__.constructor.apply(this, arguments);
      this.createMarkingSurface();
      addEventListener('resize', this.rescale);
      addEventListener('hashchange', this.rescale);
    }

    SubjectViewer.prototype.createMarkingSurface = function() {
      this.markingSurface = new MarkingSurface({
        focusable: false
      });
      this.markingSurface.svg.attr({
        preserveAspectRatio: 'xMidYMid meet'
      });
      this.frameGroup = this.markingSurface.addShape('g.frames');
      this.frames = [];
      this.markingSurface.on('marking-surface:add-tool', (function(_this) {
        return function(tool) {
          var color, ref2, ref3;
          tool.attr(_this.FROM_CURRENT_TASK, true);
          color = (ref2 = _this.toolOptions) != null ? ref2.color : void 0;
          if (color != null) {
            tool.el.style.color = color;
          }
          tool.unit = _this.toolOptions.unit;
          tool.upp = _this.toolOptions.upp;
          if ((ref3 = tool.controls) != null) {
            ref3.details = _this.toolOptions.details;
          }
          tool.mark.set('_taskIndex', _this.taskIndex);
          if (_this.toolOptions.value != null) {
            tool.mark.set('value', _this.toolOptions.value);
          }
          return tool.mark.set('frame', _this.currentFrame);
        };
      })(this));
      return this.markingSurfaceContainer.append(this.markingSurface.el);
    };

    SubjectViewer.prototype.rescale = function() {
      var maxPhysicalHeight, maxPhysicalWidth, scale;
      maxPhysicalWidth = this.markingSurface.el.parentNode.offsetWidth;
      maxPhysicalHeight = Math.min(innerHeight - 10);
      scale = Math.min(maxPhysicalWidth / this.maxWidth, maxPhysicalHeight / this.maxHeight);
      this.markingSurface.svg.attr({
        width: scale * this.maxWidth,
        height: scale * this.maxHeight
      });
      return this.markingSurface.rescale();
    };

    SubjectViewer.prototype.loadSubject = function(subject, callback) {
      var frames, heights, i, imgSrc, loaded, ref2, subjectImages, widths;
      this.subject = subject;
      this.pauseFrames();
      this.favoriteToggle.prop('checked', false);
      this.markingSurface.reset();
      this.el.attr('data-loading', true);
      while (this.frames.length !== 0) {
        this.frames.pop().remove();
      }
      this.togglesList.empty();
      subjectImages = [].concat((ref2 = this.subject.location.standard) != null ? ref2 : this.subject.location);
      loaded = [];
      widths = [];
      heights = [];
      frames = (function() {
        var j, len, results;
        results = [];
        for (i = j = 0, len = subjectImages.length; j < len; i = ++j) {
          imgSrc = subjectImages[i];
          results.push((function(_this) {
            return function(i) {
              _this.addFrame(imgSrc, function(image) {
                var k, len1;
                image.el.style.visibility = 'hidden';
                widths.push(image.attr('width'));
                heights.push(image.attr('height'));
                _this.maxWidth = Math.max.apply(Math, widths);
                _this.maxHeight = Math.max.apply(Math, heights);
                _this.markingSurface.svg.attr({
                  viewBox: "0 0 " + _this.maxWidth + " " + _this.maxHeight
                });
                _this.frameGroup.attr({
                  transform: "translate(" + (_this.maxWidth / 2) + ", " + (_this.maxHeight / 2) + ")"
                });
                loaded.push(image);
                if (loaded.length === subjectImages.length) {
                  _this.el.attr('data-loading', null);
                  for (k = 0, len1 = loaded.length; k < len1; k++) {
                    image = loaded[k];
                    image.el.style.visibility = '';
                  }
                  _this.rescale();
                  _this.goTo(0);
                  return typeof callback === "function" ? callback() : void 0;
                }
              });
              return _this.addToggle(i);
            };
          })(this)(i));
        }
        return results;
      }).call(this);
      return this.frameControls.attr('data-single-frame', (subjectImages.length === 1) || null);
    };

    SubjectViewer.prototype.loadClassification = function(classification, callback) {
      return typeof callback === "function" ? callback() : void 0;
    };

    SubjectViewer.prototype.addFrame = function(imgSrc, callback) {
      var image;
      image = this.frameGroup.addShape('image');
      this.frames.push(image);
      return loadImage(imgSrc, (function(_this) {
        return function(arg) {
          var height, src, width;
          src = arg.src, width = arg.width, height = arg.height;
          image.attr({
            'xlink:href': src,
            width: width,
            height: height,
            x: width / -2,
            y: height / -2
          });
          return typeof callback === "function" ? callback(image) : void 0;
        };
      })(this));
    };

    SubjectViewer.prototype.addToggle = function(index) {
      return this.togglesList.append("<button name='toggle-frame' value='" + index + "' class='toggle-frame'>" + (index + 1) + "</button>\n");
    };

    SubjectViewer.prototype.goTo = function(currentFrame) {
      var buttons;
      this.currentFrame = currentFrame;
      this.currentFrame = modulo(this.currentFrame, this.frames.length);
      this.frames[this.currentFrame].toFront();
      buttons = this.togglesList.find('button');
      buttons.attr('data-selected', null);
      buttons.eq(this.currentFrame).attr('data-selected', true);
      return this.el.trigger('change-frame', [this.currentFrame]);
    };

    SubjectViewer.prototype.playFrames = function() {
      this.playButton.prop('disabled', true);
      this.pauseButton.prop('disabled', false);
      return this.advanceFrames();
    };

    SubjectViewer.prototype.advanceFrames = function() {
      this.goTo(this.currentFrame + 1);
      return this.advanceTimeout = setTimeout(this.advanceFrames.bind(this), 250);
    };

    SubjectViewer.prototype.pauseFrames = function() {
      clearTimeout(this.advanceTimeout);
      this.playButton.prop('disabled', false);
      return this.pauseButton.prop('disabled', true);
    };

    SubjectViewer.prototype.setTaskIndex = function(taskIndex) {
      var j, ref2, results, tool;
      this.taskIndex = taskIndex;
      ref2 = this.markingSurface.tools;
      results = [];
      for (j = ref2.length - 1; j >= 0; j += -1) {
        tool = ref2[j];
        results.push(tool.attr(this.FROM_CURRENT_TASK, (tool.mark._taskIndex === this.taskIndex) || null));
      }
      return results;
    };

    SubjectViewer.prototype.setTool = function(tool, options) {
      this.markingSurface.tool = tool;
      return this.toolOptions = options;
    };

    SubjectViewer.prototype.getMarks = function() {
      var j, len, mark, marks, name, ref2;
      marks = {};
      ref2 = this.markingSurface.tools;
      for (j = 0, len = ref2.length; j < len; j++) {
        mark = ref2[j].mark;
        if (marks[name = mark.step] == null) {
          marks[name] = [];
        }
        marks[mark.step].push(mark);
      }
      return marks;
    };

    SubjectViewer.prototype.events = {
      'change input[name="hide-old-marks"]': function() {
        var hide, j, len, ref2, results, tool;
        hide = this.oldMarksToggle.prop('checked');
        ref2 = this.markingSurface.tools;
        results = [];
        for (j = 0, len = ref2.length; j < len; j++) {
          tool = ref2[j];
          tool.deselect();
          results.push(tool.attr('data-hidden', hide ? true : null));
        }
        return results;
      },
      'click button[name="play-frames"]': function() {
        this.playFrames();
        return this.pauseButton.focus();
      },
      'click button[name="pause-frames"]': function() {
        this.pauseFrames();
        return this.playButton.focus();
      },
      'click button[name="toggle-frame"]': function(e) {
        return this.goTo(e.currentTarget.value);
      }
    };

    return SubjectViewer;

  })(Controller);

  module.exports = SubjectViewer;

}).call(this);
