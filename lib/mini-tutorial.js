// Generated by CoffeeScript 1.9.1
(function() {
  var $, MiniTutorial, TabSet,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  $ = window.jQuery;

  TabSet = require('./tab-control');

  MiniTutorial = (function() {
    var steps;

    MiniTutorial.prototype.CLOSE_EVENT = 'mini-tutorial:close';

    steps = [];

    MiniTutorial.prototype.closeLabel = '&times;';

    MiniTutorial.prototype.previousLabel = 'Previous';

    MiniTutorial.prototype.nextLabel = 'Next';

    MiniTutorial.prototype.finishLabel = 'Finished';

    MiniTutorial.prototype.index = 0;

    MiniTutorial.prototype.template = function() {
      var i, step;
      return "<button type='button' name='readymade-mini-tutorial-close' aria-label='Close'>" + this.closeLabel + "</button> <div class='readymade-mini-tutorial-contents'> " + (((function() {
        var j, len, ref, results;
        ref = this.steps;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          step = ref[j];
          results.push("<div> <div class='readymade-mini-tutorial-images'><img src='" + step.image + "' alt='" + step.alt + "' class='readymade-mini-tutorial-image' /></div> <div class='readymade-mini-tutorial-content'>" + step.content + "</div> </div>");
        }
        return results;
      }).call(this)).join('\n')) + " </div> <div class='readymade-mini-tutorial-actions'> <button type='button' name='readymade-mini-tutorial-previous'> <span class='readymade-mini-tutorial-button-label'>" + this.previousLabel + "</span> </button> <button type='button' name='readymade-mini-tutorial-next'> <span class='readymade-mini-tutorial-button-label'>" + this.nextLabel + "</span> </button> <button type='button' name='readymade-mini-tutorial-finish'> <span class='readymade-mini-tutorial-button-label'>" + this.finishLabel + "</span> </button> </div> <div class='readymade-mini-tutorial-steppers'> " + (((function() {
        var j, len, ref, results;
        ref = this.steps;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          step = ref[i];
          results.push("<button id='tut-tab-" + i + "' type='button' name='readymade-mini-tutorial-stepper'> <span class='readymade-mini-tutorial-button-label'>" + (i + 1) + "</span> </button>");
        }
        return results;
      }).call(this)).join('\n')) + " </div>";
    };

    function MiniTutorial(options) {
      this.handleTabClick = bind(this.handleTabClick, this);
      var $el, close, i, j, key, last_step, len, ref, slide, step_controls, tab, value;
      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      if (this.el == null) {
        this.el = document.createElement('div');
      }
      this.el.classList.add('readymade-mini-tutorial-underlay');
      this.el.setAttribute('aria-hidden', true);
      this.close();
      if (this.dialog == null) {
        this.dialog = document.createElement('div');
      }
      this.dialog.classList.add('readymade-mini-tutorial-dialog');
      this.dialog.setAttribute('role', 'dialog');
      this.dialog.insertAdjacentHTML('afterBegin', this.template());
      this.previousButton = this.dialog.querySelector('[name="readymade-mini-tutorial-previous"]');
      this.nextButton = this.dialog.querySelector('[name="readymade-mini-tutorial-next"]');
      this.finishButton = this.dialog.querySelector('[name="readymade-mini-tutorial-finish"]');
      $el = $(this.el);
      $el.on('click', '[name="readymade-mini-tutorial-close"]', this.close.bind(this));
      $el.on('click', '[name="readymade-mini-tutorial-previous"]', this.previous.bind(this));
      $el.on('click', '[name="readymade-mini-tutorial-next"]', this.next.bind(this));
      $el.on('click', '[name="readymade-mini-tutorial-finish"]', this.close.bind(this));
      $el.on('focus', 'button[role=tab]', this.handleTabClick);
      step_controls = new TabSet;
      ref = this.dialog.querySelectorAll('.readymade-mini-tutorial-contents > div');
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        slide = ref[i];
        tab = this.dialog.querySelector("#tut-tab-" + i);
        step_controls.add(tab, slide, i === 0);
        $(tab).on('click', i, (function(_this) {
          return function(e) {
            return _this.goTo(e.data);
          };
        })(this));
      }
      last_step = step_controls.tabcontrols[step_controls.tabcontrols.length - 1];
      close = this.dialog.querySelector('[name="readymade-mini-tutorial-close"]');
      $el.on('keydown', '[name="readymade-mini-tutorial-stepper"]:last', (function(_this) {
        return function(e) {
          if (e.which === 9 && !e.shiftKey) {
            e.preventDefault();
            return close.focus();
          }
        };
      })(this));
      $el.on('keydown', '[name="readymade-mini-tutorial-close"]', (function(_this) {
        return function(e) {
          if (e.which === 9 && e.shiftKey) {
            e.preventDefault();
            return last_step.tab.focus();
          }
        };
      })(this));
      this.step_controls = step_controls;
      this.el.appendChild(this.dialog);
      this.goTo(this.index);
    }

    MiniTutorial.prototype.goTo = function(index1) {
      var lastStep;
      this.index = index1;
      this.index = modulo(this.index, this.steps.length);
      this.step_controls.goTo(this.index);
      this.previousButton.disabled = this.index === 0;
      lastStep = this.steps.length - 1;
      this.nextButton.disabled = this.index === lastStep;
      this.finishButton.disabled = this.index !== lastStep;
      this.active_button = this.index === lastStep ? this.finishButton : this.nextButton;
    };

    MiniTutorial.prototype.handleTabClick = function(e) {
      var index;
      index = e.target.id.replace('tut-tab-', '');
      return this.goTo(index);
    };

    MiniTutorial.prototype.previous = function() {
      var ref;
      this.goTo(this.index - 1);
      if ((ref = this.active_button) != null) {
        ref.focus();
      }
    };

    MiniTutorial.prototype.next = function() {
      var ref;
      this.goTo(this.index + 1);
      if ((ref = this.active_button) != null) {
        ref.focus();
      }
    };

    MiniTutorial.prototype.open = function() {
      var ref;
      this.el.setAttribute('data-transitioning', true);
      this.current_focus = (ref = document.activeElement) != null ? ref : document.body;
      setTimeout((function(_this) {
        return function() {
          var ref1;
          _this.el.setAttribute('aria-hidden', false);
          _this.el.removeAttribute('data-transitioning');
          return (ref1 = _this.active_button) != null ? ref1.focus() : void 0;
        };
      })(this), 250);
    };

    MiniTutorial.prototype.close = function() {
      var ref;
      this.el.setAttribute('data-transitioning', true);
      this.el.setAttribute('aria-hidden', true);
      setTimeout(this.el.removeAttribute.bind(this.el, 'data-transitioning'), 250);
      $(this.el).trigger(this.CLOSE_EVENT);
      if ((ref = this.current_focus) != null) {
        ref.focus();
      }
    };

    return MiniTutorial;

  })();

  module.exports = MiniTutorial;

}).call(this);
