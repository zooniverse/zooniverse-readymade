// Generated by CoffeeScript 1.12.4
(function() {
  var DrawingTask, RadioTask,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  RadioTask = require('./radio');

  DrawingTask = (function(superClass) {
    var value;

    extend(DrawingTask, superClass);

    function DrawingTask() {
      return DrawingTask.__super__.constructor.apply(this, arguments);
    }

    DrawingTask.type = 'drawing';

    value = [];

    DrawingTask.prototype.tools = {
      point: require('../drawing-tools/point'),
      ellipse: require('marking-surface/lib/tools/ellipse'),
      rect: require('marking-surface/lib/tools/rectangle'),
      text: require('marking-surface/lib/tools/transcription')
    };

    DrawingTask.prototype.SELECT_TOOL = 'decision-tree:select-drawing-tool';

    DrawingTask.prototype.enter = function() {
      var choice, i, len, ref, results;
      DrawingTask.__super__.enter.apply(this, arguments);
      this.el.addEventListener('change', this, false);
      if (this.choices.length === 1) {
        return this.check(this.choices[0]);
      } else {
        ref = this.choices;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          choice = ref[i];
          if (choice.checked) {
            results.push(this.check(choice));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    DrawingTask.prototype.exit = function() {
      DrawingTask.__super__.exit.apply(this, arguments);
      this.el.removeEventListener('change', this, false);
      return this.dispatchEvent(this.CHANGE_TOOL, null);
    };

    DrawingTask.prototype.handleEvent = function(e) {
      var choice;
      if (e.type === 'change' && e.target.hasAttribute('data-choice-index')) {
        choice = this.getChoice();
        return this.selectTool(choice.type, choice);
      } else {
        return DrawingTask.__super__.handleEvent.apply(this, arguments);
      }
    };

    DrawingTask.prototype.selectTool = function(tool, choice) {
      if (typeof tool === 'string') {
        tool = this.tools[tool];
      }
      return this.dispatchEvent(this.SELECT_TOOL, {
        tool: tool,
        choice: choice
      });
    };

    DrawingTask.prototype.check = function(choice) {
      var ref;
      if ((ref = this.el.querySelector('input:checked')) != null) {
        ref.checked = false;
      }
      if (choice != null) {
        this.el.querySelector("[value=" + choice.value + "]").checked = true;
      }
      return this.selectTool(choice.type, choice);
    };

    DrawingTask.prototype.reset = function(value) {
      if (value == null) {
        value = [];
      }
      return this.value = value;
    };

    DrawingTask.prototype.getValue = function() {
      return this.value;
    };

    DrawingTask.prototype.addMark = function(mark) {
      return this.value.push(mark);
    };

    return DrawingTask;

  })(RadioTask);

  module.exports = DrawingTask;

}).call(this);
