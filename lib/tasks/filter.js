// Generated by CoffeeScript 1.10.0
(function() {
  var Dropdown, FilterTask, RadioTask, choiceTemplate, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RadioTask = require('./radio');

  Dropdown = ((ref = window.zooniverse) != null ? (ref1 = ref.controllers) != null ? ref1.Dropdown : void 0 : void 0) || require('zooniverse/controllers/dropdown');

  choiceTemplate = require('../templates/choice');

  FilterTask = (function(superClass) {
    extend(FilterTask, superClass);

    FilterTask.type = 'filter';

    FilterTask.prototype.filters = null;

    FilterTask.prototype.currentFilters = null;

    FilterTask.prototype.buttons = null;

    FilterTask.prototype.menus = null;

    FilterTask.prototype.clearButtons = null;

    FilterTask.prototype.dropdowns = null;

    FilterTask.prototype.filtersTemplate = function() {
      var filter, i, v, value;
      return "<div class='readymade-classification-filters'> " + (((function() {
        var j, len, ref2, results;
        ref2 = this.filters;
        results = [];
        for (i = j = 0, len = ref2.length; j < len; i = ++j) {
          filter = ref2[i];
          results.push("<div class='readymade-classification-filter'> <button name='" + filter.key + "' class='readymade-filter-button'>" + filter.label + "</button> <div class='readymade-filter-menu'> <form> " + (((function() {
            var k, len1, ref3, results1;
            ref3 = filter.values;
            results1 = [];
            for (v = k = 0, len1 = ref3.length; k < len1; v = ++k) {
              value = ref3[v];
              results1.push(this.valueTemplate(filter, value, v));
            }
            return results1;
          }).call(this)).join('\n')) + " " + (this.valueTemplate({
            key: filter.key,
            type: 'button'
          }, {
            label: '&times;',
            value: ''
          }, 0)) + " </form> </div> </div>");
        }
        return results;
      }).call(this)).join('\n')) + " </div>";
    };

    FilterTask.prototype.valueTemplate = function(filter, value, i) {
      filter = Object.create(filter);
      if (filter.type == null) {
        filter.type = 'radio';
      }
      return choiceTemplate.call(filter, value, i);
    };

    function FilterTask() {
      FilterTask.__super__.constructor.apply(this, arguments);
      if (this.currentFilters == null) {
        this.currentFilters = {};
      }
      this.reflectFilter();
    }

    FilterTask.prototype.renderTemplate = function() {
      var filtersEl, i, menu, questionEl;
      FilterTask.__super__.renderTemplate.apply(this, arguments);
      questionEl = this.el.querySelector('.decision-tree-question');
      questionEl.insertAdjacentHTML('afterEnd', this.filtersTemplate());
      filtersEl = this.el.querySelector('.readymade-classification-filters');
      this.buttons = Array.prototype.slice.call(filtersEl.querySelectorAll('.readymade-filter-button'));
      this.menus = Array.prototype.slice.call(filtersEl.querySelectorAll('.readymade-filter-menu'));
      this.clearButtons = (function() {
        var j, len, ref2, results;
        ref2 = this.menus;
        results = [];
        for (j = 0, len = ref2.length; j < len; j++) {
          menu = ref2[j];
          results.push(menu.querySelector('input[type="button"][value=""]'));
        }
        return results;
      }).call(this);
      return this.dropdowns = (function() {
        var j, ref2, results;
        results = [];
        for (i = j = 0, ref2 = this.buttons.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
          results.push(new Dropdown({
            button: this.buttons[i],
            menu: this.menus[i],
            buttonPinning: [1, 1],
            menuPinning: [1, 0]
          }));
        }
        return results;
      }).call(this);
    };

    FilterTask.prototype.enter = function() {
      var i, j, ref2, results;
      FilterTask.__super__.enter.apply(this, arguments);
      results = [];
      for (i = j = 0, ref2 = this.menus.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        this.menus[i].addEventListener('change', this);
        results.push(this.clearButtons[i].addEventListener('click', this));
      }
      return results;
    };

    FilterTask.prototype.exit = function() {
      var i, j, ref2;
      for (i = j = 0, ref2 = this.menus.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        this.menus[i].removeEventListener('change', this);
        this.clearButtons[i].removeEventListener('click', this);
      }
      return FilterTask.__super__.exit.apply(this, arguments);
    };

    FilterTask.prototype.handleEvent = function(e) {
      var ref2, ref3;
      if (e.type === 'change' && (ref2 = e.currentTarget, indexOf.call(this.menus, ref2) >= 0)) {
        this.handleFilterChange(this.menus.indexOf(e.currentTarget));
        return Dropdown.closeAll();
      } else if (e.type === 'click' && (ref3 = e.currentTarget, indexOf.call(this.clearButtons, ref3) >= 0)) {
        return this.clearFilter(this.clearButtons.indexOf(e.currentTarget));
      } else {
        return FilterTask.__super__.handleEvent.apply(this, arguments);
      }
    };

    FilterTask.prototype.handleFilterChange = function(index) {
      var checked, valueIndex;
      checked = this.menus[index].querySelector(':checked');
      if (checked) {
        valueIndex = checked.getAttribute('data-choice-index');
        this.currentFilters[this.filters[index].key] = this.filters[index].values[valueIndex].value;
      }
      return this.reflectFilter(this.currentFilters);
    };

    FilterTask.prototype.clearFilter = function(index) {
      var ref2;
      if ((ref2 = this.menus[index].querySelector(':checked')) != null) {
        ref2.checked = false;
      }
      delete this.currentFilters[this.filters[index].key];
      return this.reflectFilter(this.currentFilters);
    };

    FilterTask.prototype.reflectFilter = function(filterSettings) {
      var choice, choiceEls, i, j, key, len, results, value;
      choiceEls = this.el.querySelectorAll('[data-choice-index]');
      results = [];
      for (i = j = 0, len = choiceEls.length; j < len; i = ++j) {
        choice = choiceEls[i];
        choice.removeAttribute('data-filtered');
        results.push((function() {
          var results1;
          results1 = [];
          for (key in filterSettings) {
            value = filterSettings[key];
            if (indexOf.call(this.choices[i].traits[key], value) < 0) {
              results1.push(choice.setAttribute('data-filtered', true));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return FilterTask;

  })(RadioTask);

  module.exports = FilterTask;

}).call(this);
