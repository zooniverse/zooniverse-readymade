// Generated by CoffeeScript 1.12.4
(function() {
  var BaseToolControls, Task, ToolControls,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  BaseToolControls = require('marking-surface').ToolControls;

  Task = require('zooniverse-decision-tree').Task;

  ToolControls = (function(superClass) {
    extend(ToolControls, superClass);

    ToolControls.prototype.template = require('../templates/tool-controls')();

    ToolControls.prototype.details = null;

    ToolControls.prototype.taskTypes = {
      radio: require('../tasks/radio'),
      checkbox: require('../tasks/checkbox')
    };

    function ToolControls() {
      this.detailTasks = {};
      ToolControls.__super__.constructor.apply(this, arguments);
      this.detailsControls = this.el.querySelector('.readymade-details-controls');
      this.detailsControls.style.display = 'none';
      this.addEvent('click', 'button[name="readymade-destroy-drawing"]', [this.tool.mark, 'destroy']);
      this.addEvent('click', 'button[name="readymade-dismiss-details"]', [this, 'onDismissDetails']);
      this.addEvent('change', this.onChange);
      setTimeout((function(_this) {
        return function() {
          var detail, i, len, ref, results;
          if (_this.details != null) {
            _this.detailsControls.style.display = '';
            ref = _this.details;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              detail = ref[i];
              results.push(_this.addDetail(detail));
            }
            return results;
          }
        };
      })(this));
    }

    ToolControls.prototype.addDetail = function(detail) {
      var form;
      form = this.el.querySelector('form');
      if (!(detail instanceof Task)) {
        detail = new this.taskTypes[detail.type](detail);
      }
      this.detailTasks[detail.key] = detail;
      detail.renderTemplate();
      detail.show();
      return form.appendChild(detail.el);
    };

    ToolControls.prototype.onDismissDetails = function() {
      return setTimeout(((function(_this) {
        return function() {
          return _this.tool.deselect();
        };
      })(this)), 50);
    };

    ToolControls.prototype.onChange = function(e) {
      var key, ref, results, task;
      ref = this.detailTasks;
      results = [];
      for (key in ref) {
        task = ref[key];
        results.push(this.tool.mark.set(key, task.getValue()));
      }
      return results;
    };

    ToolControls.prototype.render = function() {
      return setTimeout((function(_this) {
        return function() {
          var key, ref, results, task;
          ref = _this.detailTasks;
          results = [];
          for (key in ref) {
            task = ref[key];
            results.push(task.reset(_this.tool.mark[key]));
          }
          return results;
        };
      })(this));
    };

    return ToolControls;

  })(BaseToolControls);

  module.exports = ToolControls;

}).call(this);
